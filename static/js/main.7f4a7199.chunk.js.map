{"version":3,"sources":["components/location-details.jsx","components/forecast-summary.jsx","components/forecast-summaries.jsx","components/forecast-details.jsx","components/SearchForm.jsx","components/app.jsx","index.jsx"],"names":["LocationDetails","props","className","city","country","ForecastSummary","moment","date","format","temperature","description","name","iconId","icon","flip","rotate","onClick","onSelect","ForecastSummaries","forecasts","map","forecast","key","max","onForecastSelect","ForecastDetails","min","humidity","wind","speed","direction","SearchForm","state","searchText","handleInputChange","bind","event","this","setState","target","value","onSearch","type","onChange","placeholder","e","React","Component","App","handleCityRequest","preventDefault","Axios","get","then","response","location","data","selectedDate","handleForecastSelect","selectedForecast","find","render","global","document","getElementById"],"mappings":"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","file":"static/js/main.7f4a7199.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst LocationDetails = props => <h1 className=\"location-details\">{props.city}, {props.country}</h1>;\n\nLocationDetails.propTypes = {\n  city: PropTypes.string.isRequired,\n  country: PropTypes.string.isRequired,\n};\n\nexport default LocationDetails; ","import React from 'react';\nimport WeatherIcon from 'react-icons-weather';\nimport moment from 'moment';\n\nconst ForecastSummary = (props) => {\n  return (\n    <div className=\"summary-forecast\">\n      <span className=\"summary-date\">{moment(props.date).format('ddd Do MMM')}</span>\n        <br></br>\n      <span className=\"summary-temperature\">{props.temperature}°C</span>\n        <br></br>\n      <span className=\"summary-description\">{props.description}</span>\n        <br></br>\n      <span className=\"summary-icon\"><WeatherIcon name=\"owm\" iconId={props.icon} flip=\"horizontal\" rotate=\"90\" /></span>\n        <button onClick={() => props.onSelect(props.date)}>More Details</button>\n    </div>\n  )\n}\n\nexport default ForecastSummary;\n","import React from 'react';\nimport ForecastSummary from './forecast-summary';\n\nimport '../styles/forecast-summaries.css'\n\nconst ForecastSummaries = props => (\n  <div className=\"forecast-summaries\">\n    {\n      props.forecasts.map(forecast => (\n        <ForecastSummary\n          key={forecast.date}\n          date={forecast.date}\n          description={forecast.description}\n          icon={forecast.icon}\n          temperature={forecast.temperature.max}\n          onSelect={props.onForecastSelect}\n        />\n      ))\n    }\n  </div>\n);\n\nexport default ForecastSummaries","import React from 'react';\nimport moment from 'moment';\n\nconst ForecastDetails = props => {\n  return (\n    <div className=\"forecast-details\">\n      <span className=\"formatted-date\">Date:{moment(props.forecast.date).format('ddd Do MMM')}</span>\n        <br></br>\n      <span className=\"min-temp\">Minimum Temperature:{props.forecast.temperature.min}°C</span>\n        <br></br>\n      <span className=\"max-temp\">Maximum Temperature:{props.forecast.temperature.max}°C</span>\n        <br></br>\n      <span className=\"humidity\">Humidity:{props.forecast.humidity}%</span>\n        <br></br>\n      <span className=\"wind-speed\">Wind Speed:{props.forecast.wind.speed}mph</span>\n        <br></br>\n      <span className=\"wind-direction\">Wind Direction:{props.forecast.wind.direction}</span>\n    </div>\n  )\n}\n\nexport default ForecastDetails;","import React from 'react';\n\nclass SearchForm extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      searchText: \"\",\n    }\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  handleInputChange(event){\n    this.setState({\n      searchText: event.target.value,\n    });\n  }\n\n  render() {\n    const { onSearch } = this.props;\n    const { searchText } = this.state;\n    return <div className=\"search-bar\">\n      <input\n        className=\"input\"\n        type=\"text\" \n        onChange={this.handleInputChange}\n        value={this.state.searchText}\n        placeholder=\"Enter City Name Here..\"\n      />\n      <button\n        onClick={e => onSearch(e, searchText)}\n        className=\"search-button\"\n        type=\"submit\">\n        Search\n      </button>\n    </div>\n  }\n}\n\nexport default SearchForm;","import React from 'react';\nimport LocationDetails from './location-details';\nimport ForecastSummaries from './forecast-summaries';\nimport ForecastDetails from './forecast-details';\nimport SearchForm from './SearchForm';\n\nimport '../styles/app.css';\nimport Axios from 'axios';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state ={\n      selectedDate: 0,\n      forecasts: [],\n      location: {\n        city: '',\n        country:''\n      }\n    };\n    this.handleForecastSelect = this.handleForecastSelect.bind(this);\n  }\n\n  handleForecastSelect(date) {\n    this.setState({\n      selectedDate: date,\n    });\n  }\n\n  componentDidMount() {\n    Axios.get(`https://mcr-codes-weather.herokuapp.com/forecast`).then(response => {\n      this.setState({\n        location: {\n          city: response.data.location.city,\n          country: response.data.location.country\n        },\n        forecasts: response.data.forecasts,\n      });\n    });\n  }\n\n  handleCityRequest = (e, city) => {\n    e.preventDefault();\n\n    Axios.get(`https://mcr-codes-weather.herokuapp.com/forecast?city=${city}`).then(response => {\n      this.setState({\n        location: {\n          city: response.data.location.city,\n          country: response.data.location.country,\n        },\n        forecasts: response.data.forecasts,\n      });\n    });\n  };\n\n  render() {\n    const selectedForecast = this.state.forecasts.find(forecast => forecast.date === this.state.selectedDate);\n\n    return (\n      <div className=\"forecast\">\n        <LocationDetails\n          city={this.state.location.city}\n          country={this.state.location.country}\n        />\n        <SearchForm onSearch={this.handleCityRequest} />\n        <br></br>\n        <ForecastSummaries \n          forecasts={this.state.forecasts} \n          onForecastSelect={this.handleForecastSelect} \n        />\n        {\n        selectedForecast && <ForecastDetails forecast={selectedForecast} />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;","import 'raf/polyfill';\n\nimport React from 'react';\nimport { render } from 'react-dom';\nimport App from './components/app';\n\n\nrender(<App />, global.document.getElementById('root'));\n"],"sourceRoot":""}